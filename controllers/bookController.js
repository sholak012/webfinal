const Book = require('../models/Book');
const Review = require('../models/Review');

// üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
// bookController.js (—Ñ—É–Ω–∫—Ü–∏—è getBooks)
const getBooks = async (req, res) => {
  try {
    const books = await Book.find({ user: req.user.id }).populate('reviews'); // –î–æ–±–∞–≤—å—Ç–µ populate
    res.json(books);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching books' });
  }
};

// üìå –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
const addBook = async (req, res) => {
  try {
    const { title, author, status } = req.body;

    if (!title || !author) {
      return res.status(400).json({ message: 'Please provide title and author' });
    }

    const book = new Book({
      user: req.user.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      title,
      author,
      status: status || 'Reading',
    });

    const savedBook = await book.save();
    res.status(201).json(savedBook);
  } catch (error) {
    console.error('Error adding book:', error);
    res.status(500).json({ message: 'Error adding book', error: error.message });
  }
};

// üìå –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
const addReview = async (req, res) => {
  const { rating, comment } = req.body;
  const bookId = req.params.id;

  try {
    const reviews = await Review.find({ bookId: req.params.id });
    res.json(reviews);
    const review = new Review({
      bookId,
      userId: req.user.id,
      rating,
      comment,
    });

    await review.save();
    res.status(201).json(review);
  } catch (error) {
    res.status(500).json({ message: 'Error adding review', error: error.message });
  }
};
// controllers/bookController.js
const deleteBook = async (req, res) => {
  try {
    const book = await Book.findById(req.params.id);

    if (!book) {
      return res.status(404).json({ message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (book.user.toString() !== req.user.id) {
      return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' });
    }

    await Book.deleteOne({ _id: req.params.id });
    res.json({ message: '–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', error: error.message });
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é

const getReviews = async (req, res) => {
  try {
    const reviews = await Review.find({ bookId: req.params.id });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching reviews' });
  }
};

// üìå –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = { 
  getBooks, 
  addBook, 
  addReview,
  getReviews,
  deleteBook // –î–æ–±–∞–≤–ª–µ–Ω–æ
};